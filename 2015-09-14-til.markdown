---
layout: post
title: "TIL"
date: 2015-09-14 06:49:55 +0000
comments: true
categories: Python
---

### VirtualEnv
[virtualenv](http://pythoninreal.blogspot.com/2013/12/virtualenv.html)

### None
Python always return None as the result of a statement unless it explicitly return value

#### + 는 문자열과 리스트만 연결한다.

문자열이 아닌 값은 str(), repr(), format() 함수를 사용해 문자열 표현으로 변환

```python
s = "the value of x is " + str(x)
s = "the value of x is " + repr(x)
s = "the value of x is " + format(x, "4d")
```

str() 과 repr() 는 둘 다 문자열을 생성하지만 보통 그 결과는 약간 다르다. str() 는 print 문을 사용할 때 얻는 결과를 생성하지만, repr() 는 객체의 값을 정확히 입력하기 위해 프로그램에 입력해야하는 문자열을 생성한다.

```python
>>> x = 3.4
>>> str(x)
'3.4'

>>> repr(x)
'3.399999999999'
>>>
```

### List

`names = []` 혹은 `names = list()` 와 같이 초기화 한다.



### Tuple

`stock = ('GOOG', 100, 490.10)` 혹은 괄호 없이도 생성 가능 `stock = 'GOOG', 100, 490.10`

특수한 구문을 사용해 0과 1개의 요소를 가지는 튜플도 정의 가능
a = ()
b = (item,)
c = item,

리스트처럼 튜플의 값도 숫자 색인으로 추출할 수 있다. 하지만 다음과 같이 튜플을 변수들로 풀어헤치는 방식이 더 흔히 쓰인다.
name, shares, price = stock
host, port = address

리스트가 지원하는 대부분의 연산을 튜플도 지원하지만 한번 생성되고 나면 튜플의 내용은 변경할 수 없다.(즉, 기존 튜플의 요소를 대체, 삭제하거나 새로운 요소를 추가할 수 없다). 다라서 튜플은 항목을 추가하거나 삭제할 수 있는 객체들의 컬렉션이 아니라, 여러 부분으로 이루어진 단일 객체로 보는 것이 더 적절하다. (튜플이 수정이 불가능하므로 메모리 사용량이 적다)

### 사전 (dict)

`prices = {}` 혹은 `prices = dict()` 로 초기화

키 목록을 리스트로 변환 `syms = list(prices)`

### range

`range(i,j,보폭)` 은 i - j 까지 x 보폭으로 iteration

매우 큰 범위의 정수를 표현할때는 메모리 소진을 막기 위해서 `range` 는 잘 쓰지 않고 `xrange` 를 사용한다. 파이썬 3 에서는 xrange 가 range 로 변경되었고 예전 range 함수는 없어졌다.

### 함수

튜플을 이용해서 여러 값을 반환할 수 있다.

```python
def remainder(a,b):
  q = a // b # // 는 몫만 리턴
  r = a - q*b
  return (q, r) # 결과를 개별 변수에 쉽게 할당 가능 quotient, remainder = divide(1456, 33)
```

함수 인수에 기본 값을 할당하려면 대입문을 사용한다. 아래와 같이 기본값이 주어지면 이어지는 함수 호출에서 해당 값을 생략할 수 있다. 물론 생략한 값은 기본값을 가지게 된다.
```python
def connect(hostname,port,timeout=400):
  pass

connect('www.python.org', 80)
```

함수안에서 전역 변수의 값을 수정하려면 다음과 같이 `global` 문을 사용하면 된다.

```python
count = 0

def foo():
  global count
  count += 1
```

### 객체와 클래스

dir() 함수는 객체가 제공하는 메서드들을 나열한다.

```python
>>> items = [34, 23]
>>> dir(items)
```

객체를 살펴볼 때 항상 이중 밑줄로 시작하고 끝나는 특수한 메서드들이 있다. 이 메서드들은 언어상에서 제공하는 다양한 연산자를 구현한다. 다음 예에서 __add__() 메서드는 + 연산자를 구현한다.

```python
>>> items.__add__([73,101])
[37, 42, 73, 101]
>>>

```

class 문은 새로운 객체 타입을 정의하며 객체지향 프로그램을 작성하는데 쓰인다. 예를 들어 다음 클래스는 push(), pop(), length() 연산자를 갖는 간단한 스택을 정의한다.

```python
class Stack(object):
  def __init__(self):
    self.stack = []

  def push(self,object):
    self.stack.append(object)

  def pop(self):
    return self.stack.pop()

  def length(self):
    return len(self.stack)

```

위의 클래스 정의에서 첫 번째 줄에서 `class Stack(object)` 는 Stack 을 object 로 선언한다. 파이썬에서는 괄호로 상속 관계를 기술한다. 앞에서는 Stack 이 모든 파이썬 타입의 루트인 object 로부터 상속을 받는다. 클래스 정의에서 메서드는 def 문으로 정의된다. 각 메서드의 첫번째 인수는 항상 객체 자기 자신을 가리킨다.


위의 예제에서 Stack 을 구현했지만 사실 파이썬의 list 와 별 다를게 없다. 그래서 그냥 파이썬의 내장 list 를 상속받고 메서드를 하나 추가해서 스택을 구현할 수도 있다.

```python
class Stack(list) # 파이썬 내장 list 를 상속 (루비의 open class 랑 비슷? 근데 이미 있는 함수 재정의는 안되는듯...)
  def push(self, object):
    self.append(object)

```

### 장식자

```python
class EventHandler(object)
  @staticmethod
  def dispatcherThread():
    while(1):
      ...
      ...

EventHandler.dispatcherThread()
```

여기서 @staticmethod 는 바로 다음에 나오는 메서드가 정적 메서드라는 것을 선언한다.(장식자라고 하는데 클래스 메서드처럼 보임)


### 예외

보통 에러는 프로그램을 종료시킨다. 하지만, 다음과 같이 try 와 except 문으로 예외를 잡아서 처리할 수 있다.

```python
try:
  f = open("file.txt", "r")
except IOError as e:
  print e
```

IOError 가 발생하면, 에러의 원인에 대한 내용이 e 에 담기고 except 블록으로 제어가 넘어간다. 또 다른 예외가 발생하면 에워싼 코드 블록(존재하는 경우)으로 제어가 넘어간다. 아무런 에러도 발생하지 않으면 except  블록에 있는 코드는 무시된다.

`raise` 문은 예외 발생을 알리는 데 사용된다. 예외를 발생시킬때, 다음과 같이 내장 예외중 하나를 사용할 수 있다.

```python
raise RuntimeError("Computer says no")
```

나중에 자신만의 예외 정의하기 부분을 좀 더 참조.

락(lock) 파일, 네트워크 연결 같은 시스템 자원을 적절히 관리하는 일은 예외처리와 맞물릴 경우 까다로운 일이 된다. 이러한 일을 수월하게 만들어주기 위해 특정한 객체에 대해서는 with 문을 사용할 수 있다. 다음은 뮤텍스 락(mutex lock) 을 사용하는 코드를 작성하는 예이다.

```python
import threading
message_lock = threading.Lock()
...
with message_lock:
  message.add(newmessage)
```

이 예에서 with 문이 실행될 때 message_lock 객체가 자동으로 획득된다. 실행이 with 블록의 컨텍스트를 벗어나는 순간 락이 자동으로 해제된다. 이러한 관리는 with 블록 안에서 무슨 일이 벌어지든지 이루어진다. 예를 들어, 예외가 발생하면 제어가 블록의 컨텍스트 밖으로 나가는 순간 락이 해제된다.

with 문은 보통 파일, 연결, 락 같은 시스템 자원이나 실행 환경과 관련된 객체와 호환된다. 하지만, 사용자 정의 객체를 통해 자신만의 처리 방식을 정의할 수도 있다. 뒤에 컨텍스트 관리 프로토콜에서 자세히 확인.

### 모듈

모듈을 생성하려면 관련 문장과 정의들을 모듈과 동일한 이름을 가지는 파일에 넣으면 된다.(파일 확장자가 .py 이어야 한다).

```python
# div.py
def divide(a,b):
  q = a/b
  r = a - q*b
  return (q,r)

# 위의 모듈을 다른 프로그램에서 사용하려면
import div
a, b = div.divide(2305, 29)
```

import 문은 새로운 네임스페이스를 생성하고 .py 파일 안에 있는 모든 문장을 이 네임스페이스 안에서 실행한다. 해당 네임스페이스 안에 있는 내용에 접근하려면 앞의 예의 div.divide() 처럼 간단히 모듈의 이름을 앞에 붙여주면 된다.

모듈을 다른 이름으로 임포트하고 싶으면 `import div as foo` 혹은 특정 정의를 현재 네임스페이스에 임포트하려면 from 문을 사용한다. `from div import divide`. 모듈의 모든 내용을 현재 네임스페이스로 가져오려면 `from div import *` 모듈안의 함수들을 확인할땐 div(module) 로 확인 가능.


### help

대화식 모드 사용시 `help()` 명령을 사용해서 내장 모듈이나 기타 정보를 얻을 수 있다. 특정 모듈에 대한 정보를 얻으려면 `help('module')` 을 입력한다. 특정 함수 사용법 출력은 `__doc__` 을 아래와 같이 이용한다.

```python
>>> print issubclass.__doc__
issubclass(C, B) -> bool

Return whether class C is a subclass (i.e., a derived class) of class B.
When using a tuple as the second argument issubclass(X, (A, B, ...)),
is a shortcut for issubclass(X, A) or issubclass(X, B) or ... (etc.).
```

마지막으로 쉘에서 `pydoc 모듈/함수` 를 입력하면 그에 따른 문서들을 얻을 수 있다.


