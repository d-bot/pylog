---
layout: post
title: "Type and Object"
date: 2015-09-17 08:33:48 +0000
comments: true
categories: 
---

### 객체

파이썬 프로그램에서 모든 데이터는 객체라는 개념을 사용하여 저장된다. 객체는 신원(identity), 타입(클래스) 과 함께 값을 가진다. 예를 들어, `a=53` 라고 쓰면 53 라는 값을 갖는 정수 객체가 생성된다. 객체의 신원(identity) 는 객체가 메모리에 저장된 위치를 가리키는 포인터라고 생각할 수 있다. (a 는 그 위치를 가릴키는 이름이다.) 객체의 타입(클래스)은 객체의 내부적인 표현 형태와 객체가 지원하는 메서드 및 연산들을 설명한다. 다른 객체에 대한 참조들을 담는 객체를 컨테이너(container) 혹은 컬렉션(collection) 이라고 부른다.

객체는 대부분 몇 개의 속성과 메서드로 특정지어진다. 속성(attribute)은 객체에 연결된 값이다. 메서드(method) 는 호출될 때 객체에 대해 특정 연산을 수행하는 함수이다.

### 객체의 신원과 타입

내장 함수인 id()는 객체의 신원을 나타내는 정수를 반환한다. 보통 이 정수는 객체의 메모리 상의 위치를 나타낸다. 그러나, 이 부분은 파이썬 구현에 따라 다를 수 있다. is 연산자는 두 객체의 신원을 비교한다.

```python
def compare(a,b):
  if a is b:
    # a 와 b는 동일한 객체이다.

  if a == b:
    # a와 b는 동일한 값을 갖는다.

  if type(a) is type(b):
    # a와 b는 동일한 타입이다.

```

객체의 타입은 객체의 클래스라고 하고 그 자체도 객체이다. 이 객체는 고유하게 정의되기 때문에 주어진 타입의 모든 인스턴스에 대해서 항상 동일하다. 따라서, 타입은 is 연산자로 비교할 수 있다. 모든 타입 객체는 타입 검사에 쓰일 수 있는 이름을 갖는다. 이 이름들은 list, dict, file처럼 대부분 내장된 이름이다. 다음은 관련 예를 보여준다.

```python
if type(s) is list:
  s.append(item)

if type(d) is dict:
  d.update(t)
```

타입은 클래스를 통해 특수화(specialization)가 가능하기 때문에 내장 함수인 isinstance(object, type)를 사용하여 타입을 검사하는 것이 더 낫다. 다음은 한 예다.

```python
if isinstance(s, list):
  s.append(item)

if isinstance(d, dict):
  d.update(t)
```

isinstance() 함수는 상속 관계를 인식하기 때문에 어떤 파이썬 객체의 타입을 검사하든지 이 함수를 사용하는 것이 좋다. 과도한 타입 검사는 성능을 떨어트리므로 많이 사용하지는 말도록.

### 참조 횟수와 쓰레기 수집

모든 객체에는 참조 횟수(reference count)가 유지된다. 다음과 같이 객체가 새로운 이름에 대입되거나 리스트, 튜플, 사전 같은 컨테이너에 추가될 때 참조 횟수가 하나 증가한다.

```python
a = 37 # 값 37을 가지는 객체를 생성한다.
b = a # 37 에 대한 참조 횟수를 증가시킨다.
c = []
c.append(b) # 37 에 대한 참조 횟수를 증가 시킨다.
```
앞의 예에서 값 37을 담는 객체가 하나 만들어졌다. a는 단순히 새로 생성된 객체를 가리키는 이름일 뿐이다. b에 a가 대입되면 b는 동일한 객체에 대한 새로운 이름이 되고 객체의 참조 회숫가 하나 증가한다. 비슷하게 b를 리스트에 넣으면 객체의 참조 횟수가 다시 하나 증가한다. 앞의 예에서 오직 하나의객체만이 37을 담고 있다. 다른 모든 연산은 단순히 그 객체에 대한 새로운 참조를 생성할 뿐이다.

객체의 참조 횟수는 del문이 사용되거나 참조가 유효 범위를 벗어날 경우(혹은 재할당될 경우) 하나 감소한다. 다음은 앞의 예에서 이어지는 예이다. 객체의 현재 참조 횟수는 sys.getrefcount() 함수로 얻을 수 있다.

```python
del a # 37에 대한 참조 횟수가 하나 감소한다.
b = 42 # 37에 대한 참조 횟수가 하나 감소한다.
c[0] = 2.0 # 37에 대한 참조 횟수가 하나 감소한다.
```

객체의 참조 횟수가 9이 되면 쓰레기 수집이 수행된다. 종종 더 이상 사용되지 않는 객체들 간에 아래와 같이 순환 의존성이 존재하는 경우가 있고 성능 저하를 유발하기도 한다. (둘다 서로를 참조를 갖고있기 때문에 참조 횟수가 9이되지 못한다)

```python
a = {}
b = {}

a['b'] = b # a는 b에 대한 참조를 담고 있다.
b['a'] = a # b는 a에 대한 참조를 담고 있다.

del a
del b

```

### 참조와 복사

```python
>>> a = [1,2,3,4]
>>> b = a
>>> b is a
True
>>> b[2] = -100
>>> a   # a 도 변경된것에 주목
[1,2,-100,4]
```

위의 예에서 보듯이 a와 b가 동일한 객체를 참조하기 때문에 두 변수 중 하나에 가해진 변화가 다른 변수에서도 보인다. 이를 방지하려면 객체에 대한 참조가 아니라 복사본을 생성해야 한다.

리스트나 사전같은 컨테이너 객체에 적용되는 복사 연산에는 얕은 복사(원래 있던것들을 참조, 나머지 신규 원소들은 새로 생성)와 깊은 복사 두 가지가 있다. 얕은 복사(shallow copy)는 새로운 객체를 생성하지만 그 안은 원래 객체에 들어있던 참조로 채워진다.

```python
>>> a = [1,2,[3,4]]
>>> b = list(a) # a 에 대한 얕은 복사본을 생성
>>> b is a
False
>>> b.append(100)
>>> b
[1,2,[3,4],100]
>>> a   # a 는 변하지 않았음
[1,2,[3,4]]
>>> b[2][0] = -100
>>> b
[1,2,[-100,4],100]
>>> a   # a 도 변했음.
[1,2,[-100,4]]
>>>
```

즉, a와 b는 별개의 리스트 객체이지만 그 안의 원소는 공유된다. 따라서 b 의 한 원소에 가한 변화는 a의 원소에도 적용된다.

깊은 복사(deep copy)는 새로운 객체를 생성하고 원래 객체가 담고 있던 모든 객체를 재귀적으로 복사한다. 깊은 복사를 수행하기 위해서는 `copy.deepcopy()` 를 사용하면 된다.

### 1급 객체

파이썬에서 모든 객체는 1급(first class)이다. 이 말은 식별자로 명명될 수 있는 모든 객체는 동일한 지위를 지닌다는 것을 의미한다. 또한 이름을 가질 수 있는 모든 객체는 데이터로서 취급될 수 있다는 것을 의미하기도 한다. 다음 예는 두 개의 값을 담는 간단한 사전을 보여준다.

```python
items = {
  'number' : 42,
  'text' : 'Hello World'
}
```

모든 객체가 1급이라는 의미는 아래와 같이 위의 사전에 일반적이지 않은 항목을 더 추가해보면 더 확실히 이해할 수 있다.

```python
items["func"] = abs # abs() 함수를 추가

import math
items["mod"] = math # 모듈을 추가
items["error"] = ValueError # 예외 타입을 추가

nums = [1,2,3,4]
items["append"] nums.append # 다른 객체의 메서드를 추가

```

#### 데이터 표현을 위한 내장 타입

파이썬에는 프로그램에서 사용되는 대부분의 데이터를 표현하는 데 사용할 수 있는 14개의 내장 데이터 타입이 제공된다.

```
없음(none)        type(None)     널 객체인 None (리턴값이 반환되지 않는 함수에서 반환한다)
숫자(number)      int            정수
                  long           임의 정밀도 정수 (only python2)
                  float          부동 소수점
                  complex        복소수
                  bool           불리언

순서열(sequence)  str            문자열 (변경 불가)
모든 순서열은     unicode        유니코드 문자열(only for python2)
반복을 지원한다   list
                  tuple          튜플(변경 불가)
                  xrange         xrange() 로 생성되는 정수 범위(파이썬3 에서는 range)

매핑(mapping)     dict           사전

집합              set            변경 가능한 집합
                  frozenset      변경 불가능한 집합

```

문자열관련 메서드들은 어느 메서드도 문자열 데이터 자체를 변경하지는 않고 새로운 문자열을 반환한다.

사전은 유일한 내장 매핑 타입이며 해시 테이블이나 연관 배열의 파이썬 버전이다. 변경 불가능한 객체라면 어떤 객체든 사전의 키 값으로 사용할 수 있다(문자열, 숫자, 튜플 등). 리스트, 사전, 변경 가능한 객체를 담은 튜플은 키로 사용할 수 없다.





